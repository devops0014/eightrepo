
Scripts are used to automate the daily tasks, simplify repetitive tasks, and perform system administration tasks.
Types of scripts:
1. Bash
2. Zsh - Z Shell
3. FISH - Friendly Interactive Shell
4. Ksh - Korn Shell
5. Csh - C Shell
6. Tcsh - TENEX C SHell
7. PowerShell


Bash scripts can be used for various purposes, 
such as executing a shell command, running multiple commands together, customizing administrative tasks, performing task automation etc. 
So knowledge of bash programming basics is important for every Linux user.


cat /etc/shells
which bash
echo $SHELL
ps -p $$
cat /etc/passwd | grep ec2-user
To switch from one shell to an other shell : sh

=======================================================================================================================================================================
#! /bin/bash              (#! = shebang)
echo "Hello DevOps" > file.txt

=======================================================================================================================================================================
#!/bin/bash
mydata="Hello, world!"
echo $mydata


======================================================================================================================================================================
#!/bin/bash
echo "Printing text with newline"
echo -n "Printing text without newline"
echo -e "\nRemoving \t backslash \t characters\n"
=======================================================================================================================================================================
#!/bin/bash

# Add two numeric value
((sum=25+35))

#Print the result
echo $sum
=======================================================================================================================================================================
#!/bin/bash
: '
The following script calculates
the square value of the number, 5.
'
((area=10*5))
echo $area
=======================================================================================================================================================================
#! /bin/bash
count=10
if [$count -eq 10]
then
echo "true"
fi
========================================================================================================================================================================
if [ $(whoami) = 'root' ]; then
                echo "You are root"
        else
                        echo "You are not root"
fi
========================================================================================================================================================================

#!/bin/bash
valid=true
count=1
while [ $valid ]
do
echo $count 
if [ $count -eq 5 ];
then
break
fi
((count++))
done
=======================================================================================================================================================================
#!/bin/bash
echo "Enter Your Name"
read name
echo "Welcome $name"
=======================================================================================================================================================================
#!/bin/bash
n=10
if [ $n -lt 10 ];
then
echo "It is a one digit number"
else
echo "It is a two digit number"
fi
=======================================================================================================================================================================
!/bin/bash

echo "Enter username"
read username
echo "Enter password"
read password

if [[ ( $username == "raham" && $password == "1234" ) ]]; then
echo "valid user"
else
echo "invalid user"
fi
=======================================================================================================================================================================
#!/bin/bash

echo "Enter your lucky number"
read n

if [ $n -eq 101 ];
then
echo "You got 1st prize"
elif [ $n -eq 510 ];
then
echo "You got 2nd prize"
elif [ $n -eq 999 ];
then
echo "You got 3rd prize"

else
echo "Sorry, try for the next time"

=======================================================================================================================================================================
#!/bin/bash

echo "Enter your lucky number"
read n

if [ $n -eq 101 ];
then
echo "You got 1st prize"
elif [ $n -eq 510 ];
then
echo "You got 2nd prize"
elif [ $n -eq 999 ];
then
echo "You got 3rd prize"

else
echo "Sorry, try for the next time"
fi
=======================================================================================================================================================================
CREATE A SCRIPT THAT USER EXIST OR NOT, IF NOT LETS CREATE 

echo "Enter username:"
read username

# Check if user exists
id $username >/dev/null 2>&1
if [ $? -eq 0 ]; then
  echo "User exists"
else
  echo "User does not exist"
  read -p "Do you want to create the user? (y/n) " create_user
  if [ $create_user == "y" ]; then
    read -s -p "Enter password: " password
    echo
    useradd -m -p $(openssl passwd -1 $password) $username
    echo "User created"
  else
    exit 0
  fi
fi

=======================================================================================================================================================================

=======================================================================================================================================================================


#!/bin/bash
echo "Total arguments : $#"
echo "1st Argument = $1"
echo "2nd argument = $2"

./filename Redhat ubuntu fedora centos
=======================================================================================================================================================================
#!/bin/bash

string1="Linux"
string2="Hint"
echo "$string1$string2"
=======================================================================================================================================================================
#!/bin/bash
echo "Enter directory name"
read newdir
mkdir $newdir
=======================================================================================================================================================================
#!/bin/bash
echo "Enter filename"
read newfile
touch $newfile
=======================================================================================================================================================================
#!/bin/bash
echo "Enter directory name"
read ndir
if [ -d "$ndir" ]
then
echo "Directory exist"
else
`mkdir $ndir`
echo "Directory created"
fi
=======================================================================================================================================================================
#!/bin/bash
echo "Enter filename to remove"
read fn
rm -i $fn
=======================================================================================================================================================================
To check HTTPD IS RUNNIG OR NOT?

#!/bin/bash
check_service() {
    if systemctl status $1 | grep "active (running)"; then
        return 0
    else
        return 1
    fi
}

# Call the check_service function with argument "apache2"
if check_service httpd; then
    echo "HTTPD is running"
else
    echo "HTTPD is not running"
fi


=======================================================================================================================

To check the disk usage of HOME directory:

#!/bin/bash

get_disk_usage() {
    directory=$1
    # Calculate disk usage of specified directory
    disk_usage=$(du -s $directory | awk '{print $1}')
    echo $disk_usage
}

# Call the function and store the result in a variable
usage=$(get_disk_usage $HOME)

# Display the result
echo "The disk usage of the home directory is: $usage bytes."


=======================================================================================================================


To check the disk usage of /home directory:


#!/bin/bash

get_disk_usage() {
    directory=$1
    # Calculate disk usage of specified directory
    disk_usage=$(du -s $directory | awk '{print $1}')
    echo $disk_usage
}

# Call the function and store the result in a variable
usage=$(get_disk_usage /home)

# Display the result
echo "The disk usage is: $usage"

=======================================================================================================================


TO CHECK TOOLS ARE INSTALLED OR NOT 
#!/bin/bash  
check_package() {
    local PACKAGE_NAME="$1"
    if ! command -v "${PACKAGE_NAME}" > /dev/null 2>&1
    then
           printf "${PACKAGE_NAME} is not installed.\n"
    else
           printf "${PACKAGE_NAME} is already installed.\n"
    fi
}
check_package "vim"
check_package "git"
=======================================================================================================================


INSTALL PACKAGES USING FUNCTIONS:

#!/bin/bash
install_package() {
  local PACKAGE_NAME="$1"
  yum install "${PACKAGE_NAME}" -y
}
install_package "vim"
install_package "git"


=======================================================================================================================

TO CHECK MULTIPLE SERVICES ARE RUNNING OR NOT 

#!/bin/bash

check_services() {
    for service in "$@"; do
        if systemctl status "$service" | grep "active (running)"; then
            echo "$service is running"
        else
            echo "$service is not running"
        fi
    done
}
# adding service name apache2 mysql to check 
check_services apache2 mysql


=======================================================================================================================





































